{"version":3,"sources":["assets/dice.png","components/Actions.tsx","components/AlertModal.tsx","components/Header.tsx","screens/GameStartScreen.tsx","components/GuessListItem.tsx","components/GuessList.tsx","screens/GuessHintScreen.tsx","screens/GameOverScreen.tsx","App.tsx"],"names":["module","exports","styles","StyleSheet","create","actions","flexDirection","justifyContent","padding","actionButton","width","Actions","View","style","map","action","Button","title","onPress","alertModalBackdrop","backgroundColor","flex","height","opacity","position","alertModalContainer","borderRadius","marginHorizontal","marginVertical","alertModalTitle","color","fontWeight","alertModalContent","AlertModal","content","visible","toggle","Modal","transparent","Text","header","borderWidth","borderColor","margin","textAlign","headerText","fontSize","Header","container","alignItems","paddingHorizontal","enterNumber","enterNumberLabel","marginBottom","enterNumberInput","alignSelf","borderBottomWidth","GameStartScreen","onToBeGuessedChoice","range","useState","input","setInput","min","max","toggleModal","setAlertModalData","prevState","alertModalData","handleInputChange","inputText","parseInt","trim","length","TextInput","keyboardType","onChangeText","value","maxLength","toString","autoCapitalize","autoCorrect","autoComplete","guessListItem","guessListItemTextCount","flexBasis","guessListItemTextId","guessListItemTextGuess","GuessListItem","guess","count","identifier","number","guessListContainer","marginTop","GuessList","data","FlatList","renderItem","item","keyExtractor","lastGuessContainer","paddingVertical","lastGuess","higherOrLower","higherOrLowerLabel","GuessHintScreen","toBeGuessed","onGameOver","onLastGuess","guesses","setGuesses","floor","setFloor","ceil","setCeil","currentGuess","lessOrMore","guesser","randomNumber","Math","random","some","prevGuesses","useEffect","gameOverImageContainer","gameOverMsgContainer","gameOverMsgText","GameOverScreen","onResetGame","Image","source","require","initialGuess","App","setToBeGuessed","currentScreen","setCurrentScreen","setLastGuess","StatusBar","toBeGuessedChoice"],"mappings":"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","file":"static/js/app.b373cbf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dice.048f0bbf.png\";","import { Button, StyleSheet, View } from 'react-native';\r\nimport Action from '../types/Action';\r\n\r\nconst Actions = ({ actions }: { actions: Action[] }) => {\r\n    return (\r\n        <View style={styles.actions}>\r\n            {actions.map(action => {\r\n                return (\r\n                    <View key={action.title} style={styles.actionButton}>\r\n                        <Button\r\n                            title={action.title}\r\n                            onPress={action.action}>\r\n                        </Button>\r\n                    </View>)}\r\n            )}\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    actions: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        padding: 5,\r\n    },\r\n    actionButton: {\r\n        width: '45%',\r\n    }, \r\n});\r\n\r\nexport default Actions;\r\n","import { Button, Modal, StyleSheet, Text, View } from 'react-native';\r\nimport AlertModalType from '../types/AlertModalType';\r\n\r\nconst AlertModal = ({\r\n    title = 'Alert',\r\n    content = 'Something went wrong...',\r\n    visible = false,\r\n    toggle,\r\n}: AlertModalType\r\n) => {\r\n\r\n    return (\r\n        <Modal visible={visible} transparent={true}>\r\n            <View style={styles.alertModalBackdrop}></View>\r\n            <View style={styles.alertModalContainer}>\r\n                <Text style={styles.alertModalTitle}>{title}</Text>\r\n                <Text style={styles.alertModalContent}>{content}</Text>\r\n                <Button title=\"Ok\" onPress={toggle}></Button>\r\n            </View>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    alertModalBackdrop: {\r\n        backgroundColor: 'white',\r\n        flex: 1,\r\n        height: '100%',\r\n        opacity: 0.75,\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    alertModalContainer: {\r\n        backgroundColor: \"#222\",\r\n        borderRadius: 10,\r\n        marginHorizontal: '10%',\r\n        marginVertical: '50%',\r\n        padding: 20,\r\n    },\r\n    alertModalTitle: {\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n    },\r\n    alertModalContent: {\r\n        color: 'white',\r\n        marginVertical: 10,\r\n    }\r\n});\r\n\r\nexport default AlertModal;\r\n","import { StyleSheet, Text, View } from 'react-native';\r\n\r\nconst Header = ({ title }: { title: string }) => {\r\n    return (\r\n        <View style={styles.header}>\r\n            <Text style={styles.headerText}>\r\n                {title}\r\n            </Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    header: {\r\n        borderWidth: 2,\r\n        borderColor: 'white',\r\n        margin: 15,\r\n        padding: 10,\r\n        textAlign: 'center',\r\n        width: '50%',\r\n    },\r\n    headerText: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n    },\r\n});\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    TextInput,\r\n    View\r\n} from 'react-native';\r\nimport Actions from '../components/Actions';\r\nimport AlertModal from '../components/AlertModal';\r\nimport Header from '../components/Header';\r\nimport AlertModalType from '../types/AlertModalType';\r\n\r\nconst GameStartScreen = ({\r\n    onToBeGuessedChoice,\r\n    range\r\n}: {\r\n    onToBeGuessedChoice: (input: string) => void,\r\n    range: number[]\r\n}) => {\r\n    const [input, setInput] = useState<string>('');\r\n    const min = range[0];\r\n    const max = range[1];\r\n\r\n    const toggleModal = () => {\r\n        setAlertModalData(prevState => {\r\n            return ({\r\n                title: \"Invalid number\",\r\n                content: `You must enter a number between ${min} and ${max}.`,\r\n                visible: !prevState.visible,\r\n                toggle: toggleModal\r\n            });\r\n        });\r\n    }\r\n\r\n    const [alertModalData, setAlertModalData] = useState<AlertModalType>({\r\n        toggle: toggleModal\r\n    });\r\n\r\n    const resetAction = () => {\r\n        handleInputChange('');\r\n    }\r\n\r\n    const confirmAction = () => {\r\n        if (parseInt(input) < min || parseInt(input) > max || input.trim().length < 1) {\r\n            toggleModal();\r\n            return;\r\n        }\r\n\r\n        onToBeGuessedChoice(input);\r\n    }\r\n\r\n    const handleInputChange = (inputText: string) => {\r\n        setInput(inputText);\r\n    }\r\n\r\n    const actions = [\r\n        { title: \"Reset\", action: resetAction },\r\n        { title: \"Confirm\", action: confirmAction }\r\n    ];\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Header title=\"Guess My Number\"></Header>\r\n            <View style={styles.enterNumber}>\r\n                <Text style={styles.enterNumberLabel}>\r\n                    Enter a Number between {min} and {max}\r\n                </Text>\r\n                <TextInput\r\n                    style={styles.enterNumberInput}\r\n                    keyboardType=\"number-pad\"\r\n                    onChangeText={handleInputChange}\r\n                    value={input}\r\n                    maxLength={max.toString().length}\r\n                    autoCapitalize=\"none\"\r\n                    autoCorrect={false}\r\n                    autoComplete=\"off\"\r\n                >\r\n                </TextInput>\r\n                <Actions actions={actions}></Actions>\r\n            </View>\r\n            {alertModalData.visible &&\r\n             <AlertModal\r\n                 visible={alertModalData.visible}\r\n                 title={alertModalData.title}\r\n                 content={alertModalData.content}\r\n                 toggle={toggleModal}\r\n             ></AlertModal>}\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n        container: {\r\n        alignItems: 'center',\r\n        backgroundColor: 'black',\r\n        flex: 1,\r\n        paddingHorizontal: 25,\r\n    },\r\n    enterNumber: {\r\n        backgroundColor: '#111',\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    enterNumberLabel: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        marginBottom: 10,\r\n        textAlign: 'center',\r\n    },\r\n    enterNumberInput: {\r\n        alignSelf: 'center',\r\n        borderBottomWidth: 2,\r\n        borderColor: 'white',\r\n        color: 'white',\r\n        fontSize: 35,\r\n        margin: 10,\r\n        textAlign: 'center',\r\n        width: 50,\r\n    },\r\n});\r\n\r\nexport default GameStartScreen;\r\n","import { StyleSheet, Text, View } from 'react-native';\r\nimport Guess from '../types/Guess';\r\n\r\nconst GuessListItem = ({ guess }: { guess: Guess }) => {\r\n    return (\r\n        <View style={styles.guessListItem}>\r\n            <Text style={styles.guessListItemTextCount}>#{guess.count}</Text>\r\n            <Text style={styles.guessListItemTextId}>{guess.identifier}</Text>\r\n            <Text style={styles.guessListItemTextGuess}>{guess.number}</Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    guessListItem: {\r\n        backgroundColor: '#111',\r\n        borderRadius: 10,\r\n        flexDirection: 'row',\r\n        marginBottom: 10,\r\n        padding: 10,\r\n        width: '100%',\r\n    },\r\n    guessListItemTextCount: {\r\n        color: 'white',\r\n        flexBasis: '33.3%',\r\n    },\r\n    guessListItemTextId: {\r\n        color: 'white',\r\n        flexBasis: '33.3%',\r\n        textAlign: 'center',\r\n    },\r\n    guessListItemTextGuess: {\r\n        color: 'white',\r\n        flexBasis: '33.3%',\r\n        fontWeight: 'bold',\r\n        textAlign: 'right',\r\n    },\r\n});\r\n\r\nexport default GuessListItem;\r\n","import { FlatList, StyleSheet, View } from 'react-native';\r\nimport Guess from '../types/Guess';\r\nimport GuessListItem from './GuessListItem';\r\n\r\nconst GuessList = ({ data }: { data: Guess[]}) => {\r\n    return (\r\n        <View style={styles.guessListContainer}>\r\n            <FlatList\r\n                data={data}\r\n                renderItem={({ item }: { item: Guess }) => <GuessListItem guess={item}></GuessListItem>}\r\n                keyExtractor={item => item.count.toString()}\r\n            ></FlatList>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    guessListContainer: {\r\n        marginTop: 10,\r\n        width: '100%',\r\n        flex: 1,\r\n    }\r\n});\r\n\r\nexport default GuessList;\r\n","import { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport Actions from '../components/Actions';\r\nimport AlertModal from '../components/AlertModal';\r\nimport GuessList from '../components/GuessList';\r\nimport Header from '../components/Header';\r\nimport AlertModalType from '../types/AlertModalType';\r\nimport Guess from '../types/Guess';\r\n\r\nconst GuessHintScreen = ({\r\n    toBeGuessed, onGameOver, lastGuess, onLastGuess, range\r\n}: {\r\n    toBeGuessed: string,\r\n    onGameOver: (guess: Guess) => void,\r\n    lastGuess: Guess,\r\n    onLastGuess: (lastGuess: Guess) => void\r\n    range: number[]\r\n}) => {\r\n    const [guesses, setGuesses] = useState<Guess[]>([]);\r\n    const [floor, setFloor] = useState<number>(range[0]);\r\n    const [ceil, setCeil] = useState<number>(range[1] + 1);\r\n\r\n    const currentGuess = guesses[0] || floor;\r\n    const lessOrMore = currentGuess.number < parseInt(toBeGuessed)\r\n                                           ? 'bigger'\r\n                                           : 'smaller';\r\n\r\n    const toggleModal = () => {\r\n        setAlertModalData(prevState => {\r\n            return ({\r\n                title: \"Forgot the number you chose?\",\r\n                content: `${toBeGuessed} is ${lessOrMore} than ${currentGuess.number}`,\r\n                visible: !prevState.visible,\r\n                toggle: toggleModal\r\n            });\r\n        });\r\n    }\r\n\r\n    const [alertModalData, setAlertModalData] = useState<AlertModalType>({\r\n        toggle: toggleModal\r\n    });\r\n\r\n    const itsLess = () => {\r\n        if (currentGuess.number < parseInt(toBeGuessed)) {\r\n            toggleModal();\r\n            return;\r\n        }\r\n\r\n        if (currentGuess) {\r\n            setCeil(currentGuess.number);\r\n            guesser();\r\n        }\r\n    }\r\n\r\n    const itsMore = () => {\r\n        if (currentGuess.number > parseInt(toBeGuessed)) {\r\n            toggleModal();\r\n            return;\r\n        }\r\n\r\n        if (currentGuess) {\r\n            setFloor(currentGuess.number);\r\n            guesser();\r\n        }\r\n    }\r\n\r\n    const actions = [\r\n        { title: \"-\", action: itsLess },\r\n        { title: \"+\", action: itsMore }\r\n    ];\r\n\r\n    const guesser = () => {\r\n        const randomNumber = Math.floor(\r\n            Math.random() * (Math.floor(ceil) - Math.ceil(floor)) + floor\r\n        );\r\n\r\n        if (guesses.some(item => item.number === randomNumber)) {\r\n            guesser();\r\n            return;\r\n        }\r\n\r\n        if (randomNumber > parseInt(toBeGuessed)) {\r\n            setCeil(randomNumber);\r\n        } else {\r\n            setFloor(randomNumber);\r\n        }\r\n\r\n        const guess =\r\n            {\r\n                count: guesses.length + 1,\r\n                identifier: \"Guess\",\r\n                number: randomNumber\r\n            }\r\n\r\n        setGuesses(prevGuesses => [guess, ...prevGuesses]);\r\n        onLastGuess(guess);\r\n    }\r\n\r\n    const gameOver = (guess: Guess) => {\r\n        onGameOver(guess);\r\n    }\r\n\r\n    useEffect(() => {\r\n        guesser();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (lastGuess.number === parseInt(toBeGuessed)) {\r\n            gameOver(lastGuess);\r\n        }\r\n    }, [guesses]);\r\n\r\n    return (        \r\n        <View style={styles.container}>\r\n            <Header title=\"Computer's Guess\"></Header>\r\n            <View style={styles.lastGuessContainer}>\r\n                <Text style={styles.lastGuess}>{lastGuess && lastGuess.number}</Text>\r\n            </View>\r\n            <View style={styles.higherOrLower}>\r\n                <Text style={styles.higherOrLowerLabel}>Higher or Lower?</Text>\r\n                <Actions actions={actions}></Actions>\r\n            </View>\r\n            <GuessList data={guesses}></GuessList>\r\n            {alertModalData.visible &&\r\n             <AlertModal\r\n                 title={alertModalData.title}\r\n                 content={alertModalData.content}\r\n                 visible={alertModalData.visible}\r\n                 toggle={toggleModal}\r\n             ></AlertModal>}\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        alignItems: 'center',\r\n        backgroundColor: 'black',\r\n        flex: 1,\r\n        paddingHorizontal: 25,\r\n    },\r\n    lastGuessContainer: {\r\n        borderColor: 'white',\r\n        borderRadius: 10,\r\n        borderWidth: 2,\r\n        marginBottom: 15,\r\n        paddingVertical: 15,\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    lastGuess: {\r\n        color: 'white',\r\n        fontSize: 36,\r\n        textAlign: 'center',\r\n    },\r\n    higherOrLower: {\r\n        backgroundColor: '#111',\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        textAlign: 'center',\r\n        width: '100%',\r\n    },\r\n    higherOrLowerLabel: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        marginBottom: 10,\r\n        textAlign: 'center',\r\n    },\r\n});\r\n\r\nexport default GuessHintScreen;\r\n","import { Button, Image, StyleSheet, Text, View } from 'react-native';\r\nimport Header from '../components/Header';\r\nimport Guess from '../types/Guess';\r\n\r\nconst GameOverScreen = ({\r\n    lastGuess, onResetGame\r\n}: {\r\n    lastGuess: Guess,\r\n    onResetGame: () => void\r\n}) => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <Header title=\"Game Over\"></Header>\r\n            <View style={styles.gameOverImageContainer}>\r\n                <Image style={{width: 100, height: 100}}\r\n                       source={require('../assets/dice.png')}>\r\n\r\n                </Image>\r\n            </View>\r\n            <View style={styles.gameOverMsgContainer}>\r\n                <Text style={styles.gameOverMsgText}>\r\n                    <Text>It took </Text>\r\n                    <Text style={{fontWeight: 'bold'}}>\r\n                        {lastGuess.count}\r\n                    </Text>\r\n                    <Text> attempts to guess the number </Text>\r\n                    <Text style={{fontWeight: 'bold'}}>\r\n                        {lastGuess.number}\r\n                    </Text>\r\n                    <Text>.</Text>\r\n                </Text>\r\n            </View>\r\n            <Button\r\n                title=\"Start New Game\"\r\n                onPress={onResetGame}>\r\n            </Button>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        alignItems: 'center',\r\n        backgroundColor: 'black',\r\n        flex: 1,\r\n        paddingHorizontal: 25,\r\n    },\r\n    gameOverImageContainer: {\r\n        alignItems: 'center',\r\n        backgroundColor: 'white',\r\n        padding: 10,\r\n        width: '100%',\r\n        borderRadius: 8,\r\n    },\r\n    gameOverMsgContainer: {\r\n        backgroundColor: \"#111\",\r\n        borderRadius: 10,\r\n        marginVertical: 10,\r\n        padding: 15,\r\n    },\r\n    gameOverMsgText: {\r\n        color: 'white',\r\n    },\r\n});\r\n\r\nexport default GameOverScreen;\r\n","import { useEffect, useState } from 'react';\r\nimport { StatusBar, View } from 'react-native';\r\nimport GameStartScreen from './screens/GameStartScreen';\r\nimport GuessHintScreen from './screens/GuessHintScreen';\r\nimport GameOverScreen from './screens/GameOverScreen';\r\nimport Guess from './types/Guess';\r\n\r\nconst initialGuess = { count: 0, identifier: '', number: 0 };\r\n\r\nexport default function App() {\r\n    const [toBeGuessed, setToBeGuessed] = useState<string>('');\r\n    const [currentScreen, setCurrentScreen] = useState<string>('init');\r\n    const [lastGuess, setLastGuess] = useState<Guess>(initialGuess);\r\n    const [range, setRange] = useState<number[]>([1, 100]);\r\n\r\n    const handleToBeGuessedChoice = (toBeGuessedChoice: string): void => {\r\n        setToBeGuessed(toBeGuessedChoice);\r\n        setCurrentScreen('play');\r\n    }\r\n\r\n    const handleLastGuess = (lastGuess: Guess) => {\r\n        setLastGuess(lastGuess);\r\n    }\r\n\r\n    const handleGameOver = (guess: Guess) => {\r\n        setLastGuess(guess);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (lastGuess.number === parseInt(toBeGuessed)) {\r\n            setCurrentScreen('over');\r\n        }\r\n    }, [lastGuess]);\r\n\r\n    const handleResetGame = () => {\r\n        setToBeGuessed('');\r\n        setCurrentScreen('init');\r\n        setLastGuess(initialGuess);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StatusBar></StatusBar>\r\n            <View style={{ flex: 1 }}>\r\n                {currentScreen === 'init' &&\r\n                    <GameStartScreen\r\n                        onToBeGuessedChoice={handleToBeGuessedChoice}\r\n                        range={range}\r\n                    ></GameStartScreen>}\r\n                {currentScreen === 'play' &&\r\n                 <GuessHintScreen\r\n                     toBeGuessed={toBeGuessed}\r\n                     onGameOver={handleGameOver}\r\n                     lastGuess={lastGuess}\r\n                     onLastGuess={handleLastGuess}\r\n                     range={range}\r\n                    ></GuessHintScreen>}\r\n                {currentScreen === 'over' &&\r\n                    <GameOverScreen\r\n                        lastGuess={lastGuess}\r\n                        onResetGame={handleResetGame}\r\n                    ></GameOverScreen>}\r\n            </View>\r\n        </>\r\n    );\r\n}\r\n\r\n"],"sourceRoot":""}