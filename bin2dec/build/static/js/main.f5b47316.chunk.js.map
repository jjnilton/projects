{"version":3,"sources":["App.js","index.js"],"names":["integralPartToDecimal","integralBinaryNumber","binaryInput","toString","integralDecimalResult","power","length","i","Math","pow","integralPartToBinary","integralNumber","quotient","remainder","push","floor","reverse","join","App","useState","binary","setBinary","binaryError","setBinaryError","decimal","setDecimal","decimalError","setDecimalError","className","id","name","type","value","autoComplete","placeholder","onChange","event","target","match","result","negative","split","fractionalResult","includes","fractionalPart","fractionalBinaryNumber","fractionalDecimalResult","fractionalPartToDecimal","decimalResult","htmlFor","decimalInput","fractionalPartResult","fractionalNumber","product","productArray","count","fractionalPartToBinary","integralPartResult","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5b47316.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\n\n// handle binary to decimal (integral part)\nconst integralPartToDecimal = (integralBinaryNumber) => {\n  const binaryInput = integralBinaryNumber.toString();\n  let integralDecimalResult = \"\";\n\n  let power = binaryInput.length - 1;\n  for (let i = 0; i < binaryInput.length; i++) {\n    integralDecimalResult = +integralDecimalResult +binaryInput[i] * Math.pow(2, power);\n    power--;\n  }\n  return integralDecimalResult;\n};\n\n// handle binary to decimal (fractional part)\nconst fractionalPartToDecimal = (fractionalBinaryNumber) => {\n  let fractionalPart = fractionalBinaryNumber;\n  let fractionalDecimalResult = 0;\n  for (let i = 0; i < fractionalPart.length; i++) {\n    fractionalDecimalResult += (fractionalPart[i] * 1) / Math.pow(2, i + 1);\n  }\n  return fractionalDecimalResult;\n};\n\n// handle decimal to binary (integral part)\nconst integralPartToBinary = (integralNumber) => {\n  let quotient = integralNumber;\n  const remainder = [];\n  if (+quotient === 0) {\n    return 0;\n  }\n  while (+quotient > 0) {\n    remainder.push(+quotient % 2);\n    quotient = Math.floor(+quotient / 2);\n  }\n  return remainder.reverse().join(\"\");\n};\n\n// handle decimal to binary (fractional part)\nconst fractionalPartToBinary = (fractionalNumber) => {\n  let product = fractionalNumber;\n  let productArray = product.split(\".\");\n  product = productArray[1] / Math.pow(10, productArray[1].length);\n  let remainder = [];\n  let count = 0;\n  if (product === 0) {\n    return \"\";\n  } else {\n    while (product !== 1 && count < 13) {\n      product = product * 2;\n      remainder.push(Math.floor(product % 2));\n      if (product > 1) {\n        product = product.toString().split(\".\");\n        product = +product[1] / Math.pow(10, product[1].length);\n      }\n      count++;\n    }\n  }\n\n  return `.${remainder.join(\"\")}`;\n};\n\nfunction App() {\n  const [binary, setBinary] = useState(\"\");\n  const [binaryError, setBinaryError] = useState(false);\n  const [decimal, setDecimal] = useState(\"\");\n  const [decimalError, setDecimalError] = useState(false);\n\n  const handleBinaryToDecimal = (event) => {\n    let binaryInput = event.target.value;\n    setBinary(event.target.value);\n    \n    if (!binaryInput.match(/^(-)?[0-1]*(\\.[0-1]*)?$/g)) {\n      setBinaryError(true);\n    } else {\n      setBinaryError(false);\n      setDecimalError(false);\n      let result = event.target.value;\n      let negative = false;\n\n      if (result.match(/^-/g)) {\n        result = result.split(\"-\")[1];\n        negative = true;\n      }\n\n      if (result === \"\") {\n        setDecimal(\"\");\n      } else {\n        let fractionalResult = \"\";\n\n        if (result.includes(\".\")) {\n          let fractionalPart = result.split(\".\")[1];\n          result = result.split(\".\")[0];\n          fractionalResult = fractionalPartToDecimal(fractionalPart);\n        }\n\n        const decimalResult = fractionalResult\n          ? integralPartToDecimal(result) + fractionalResult\n          : integralPartToDecimal(result);\n        setDecimal(negative ? \"-\" + decimalResult : decimalResult);\n      }\n    }\n  };\n\n  const handleDecimalChange = (event) => {\n    let decimalInput = event.target.value;\n    setDecimal(event.target.value);\n\n    if (decimalInput.match(/^-?[0-9]*(\\.[0-9]*)?$/g)) {\n      setDecimalError(false);\n      setBinaryError(false);\n      let negative = false;\n\n      if (decimalInput.match(/^-/g)) {\n        decimalInput = decimalInput.split(\"-\")[1];\n        negative = true;\n      }\n\n      if (decimalInput === \"\") {\n        setBinary(\"\");\n      } else {\n        let fractionalPartResult = \"\";\n\n        if (decimalInput.includes(\".\")) {\n          fractionalPartResult = fractionalPartToBinary(decimalInput);\n          decimalInput = decimalInput.split(\".\")[0];\n        }\n\n        const integralPartResult = negative\n          ? \"-\" + integralPartToBinary(decimalInput)\n          : integralPartToBinary(decimalInput);\n        setBinary(integralPartResult + fractionalPartResult);\n      }\n    } else {\n      setDecimalError(true);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"main\">\n        <div className=\"title\">\n          <h1></h1>\n        </div>\n        <div className=\"converter\">\n          <div className=\"description\">Enter a binary number</div>\n          <input\n            id=\"binaryInput\"\n            name=\"binary\"\n            type=\"text\"\n            value={binary}\n            autoComplete=\"off\"\n            placeholder=\"1011\"\n            onChange={handleBinaryToDecimal}\n          />\n          <label htmlFor=\"binaryInput\">Binary</label>\n          {binaryError ? (\n            <div className=\"error\">\n              <span>Invalid binary number. Try: '1101' or '11.01'.</span>\n            </div>\n          ) : (\n            <div className=\"hidden\"></div>\n          )}\n        </div>\n        <div className=\"equals\">=</div>\n        <div className=\"converter\">\n          <div className=\"description\">Enter a decimal number</div>\n          <input\n            id=\"decimalInput\"\n            type=\"text\"\n            name=\"decimal\"\n            value={decimal}\n            autoComplete=\"off\"\n            placeholder=\"1234\"\n            onChange={handleDecimalChange}\n          />\n          <label htmlFor=\"decimalInput\">Decimal</label>\n          {decimalError ? (\n            <div className=\"error\">\n              <span>Invalid decimal number. Try: '123' or '1.23'.</span>\n            </div>\n          ) : (\n            <div className=\"hidden\"></div>\n          )}\n        </div>\n      </div>\n      <div className=\"footer\">\n        <a href=\"\">Source</a>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}