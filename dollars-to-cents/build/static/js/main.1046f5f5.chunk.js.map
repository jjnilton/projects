{"version":3,"sources":["App.js","index.js"],"names":["DICT","QUARTER","DIME","NICKEL","PENNY","App","useState","cents","setCents","error","setError","className","htmlFor","id","type","step","min","onChange","event","longFractional","target","value","includes","split","length","console","log","result","unit","unitKey","Object","keys","toString","unitValue","parseFloat","values","Math","floor","toFixed","dollarToCents","defaultValue","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAGMA,EAAO,CACX,CAAEC,QAAS,KACX,CAAEC,KAAM,IACR,CAAEC,OAAQ,KACV,CAAEC,MAAO,MAiGIC,MA/Ef,WACE,MAA0BC,mBAAS,CACjCL,QAAS,EACTC,KAAM,EACNC,OAAQ,EACRC,MAAO,IAJT,mBAAOG,EAAP,KAAcC,EAAd,KAMA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAoBA,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,SAAf,UACE,iDACgB,8BAAMJ,EAAK,SAAe,OAE1C,8CACa,8BAAMA,EAAK,MAAY,OAEpC,gDACe,8BAAMA,EAAK,QAAc,OAExC,+CACc,8BAAMA,EAAK,OAAa,YAI1C,sBAAKI,UAAU,QAAf,UACE,uBAAOC,QAAQ,QAAf,6BACA,sBAAKD,UAAU,kBAAf,UACE,qBAAKA,UAAU,cAAf,eACA,uBACEE,GAAG,QACHC,KAAK,SACLC,KAAK,MACLC,IAAI,IACJC,SA9CgB,SAACC,GACzB,IAAIC,GAAiB,EAQrB,GAPID,EAAME,OAAOC,MAAMC,SAAS,MAC1BJ,EAAME,OAAOC,MAAME,MAAM,KAAK,GAAGC,OAAS,IAC5CL,GAAiB,IAIND,EAAME,OAAOC,OACf,GAAKF,EAChBM,QAAQC,IAAI,SACZhB,GAAS,OACJ,CACLA,GAAS,GACT,IAAMiB,EArCU,SAACN,GACrB,IAD+B,EAC3BM,EAAS,GADkB,cAGd3B,GAHc,IAG/B,2BAIE,IAJsB,IAAf4B,EAAc,QACjBC,EAAUC,OAAOC,KAAKH,GAAMI,WAC5BC,EAAYC,WAAWJ,OAAOK,OAAOP,IAElCP,GAASY,GACdN,EAAOE,GAAWO,KAAKC,MAAMhB,EAAQY,GACrCZ,IAAUA,EAAQY,GAAWK,QAAQ,GATV,8BAY/B,OAAOX,EAyBYY,CAAcrB,EAAME,OAAOC,OAC1Cb,EAASmB,KAgCHa,aAAa,SAIjB,qBAAK7B,UAAU,QAAf,SACGF,EACC,sBAAME,UAAU,UAAhB,mDAIA,iEAC+B,wCAD/B,YAON,iCACE,mBAAG8B,KAAK,GAAR,0BC5FRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1046f5f5.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nconst DICT = [\n  { QUARTER: 0.25 },\n  { DIME: 0.1 },\n  { NICKEL: 0.05 },\n  { PENNY: 0.01 },\n];\n\nconst dollarToCents = (value) => {\n  let result = {};\n\n  for (let unit of DICT) {\n    let unitKey = Object.keys(unit).toString();\n    let unitValue = parseFloat(Object.values(unit));\n\n    while (value >= unitValue) {\n      result[unitKey] = Math.floor(value / unitValue);\n      value = +(value % unitValue).toFixed(2);\n    }\n  }\n  return result;\n};\n\nfunction App() {\n  const [cents, setCents] = useState({\n    QUARTER: 4,\n    DIME: 0,\n    NICKEL: 0,\n    PENNY: 0,\n  });\n  const [error, setError] = useState(false);\n  const handleInputChange = (event) => {\n    let longFractional = false;\n    if (event.target.value.includes(\".\")) {\n      if (event.target.value.split(\".\")[1].length > 2) {\n        longFractional = true;\n      }\n    }\n\n    const value = +event.target.value;\n    if (value <= 0 || longFractional) {\n      console.log(\"error\");\n      setError(true);\n    } else {\n      setError(false);\n      const result = dollarToCents(event.target.value);\n      setCents(result);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"result-container\">\n        <div className=\"result\">\n          <div>\n            Quarter (0.25)<div>{cents[\"QUARTER\"] || 0}</div>\n          </div>\n          <div>\n            Dime (0.10)<div>{cents[\"DIME\"] || 0}</div>\n          </div>\n          <div>\n            Nickel (0.05)<div>{cents[\"NICKEL\"] || 0}</div>\n          </div>\n          <div>\n            Penny (0.01)<div>{cents[\"PENNY\"] || 0}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"input\">\n        <label htmlFor=\"value\">Value in Dollar</label>\n        <div className=\"input-container\">\n          <div className=\"dollar-sign\">$</div>\n          <input\n            id=\"value\"\n            type=\"number\"\n            step=\"any\"\n            min=\"1\"\n            onChange={handleInputChange}\n            defaultValue=\"1\"\n          />\n        </div>\n\n        <div className=\"error\">\n          {error ? (\n            <span className=\"warning\">\n              Only positive decimal values allowed.\n            </span>\n          ) : (\n            <span>\n              Enter a value above. Example <code>1.67</code>.\n            </span>\n          )}\n        </div>\n      </div>\n\n      <footer>\n        <a href=\"\">Source</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}