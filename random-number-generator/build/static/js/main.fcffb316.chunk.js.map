{"version":3,"sources":["App.js","index.js"],"names":["Main","styled","main","App","useState","randomNumber","setRandomNumber","minRef","useRef","maxRef","className","onSubmit","event","preventDefault","formData","FormData","target","formObj","keys","key","get","min","max","fraction","isNaN","current","value","Math","random","floor","getRandomNumber","id","htmlFor","ref","type","name","defaultValue","step","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAGMA,EAAOC,IAAOC,KAAV,4zCAgKKC,MAvFf,WACE,MAAwCC,qBAAxC,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAASC,mBACTC,EAASD,mBA+Bf,OACE,sBAAKE,UAAU,YAAf,UACE,eAACV,EAAD,WACE,yDACA,uBAAMW,SAjCS,SAACC,GACpBA,EAAMC,iBAEN,IAH8B,EAGxBC,EAAW,IAAIC,SAASH,EAAMI,QAC9BC,EAAU,GAJc,cAKZH,EAASI,QALG,IAK9B,2BAAmC,CAAC,IAAzBC,EAAwB,QACjCF,EAAQE,GAAOL,EAASM,IAAID,IANA,8BAS9B,IAAQE,EAAuBJ,EAAvBI,IAAKC,EAAkBL,EAAlBK,IAAKC,EAAaN,EAAbM,SAiBlBjB,EAfwB,SAACe,EAAKC,EAAKC,GAC7BC,MAAMH,KACRA,EAAM,EACNd,EAAOkB,QAAQC,MAAQ,GAGrBF,MAAMF,KACRA,EAAM,GACNb,EAAOgB,QAAQC,MAAQ,IAGzB,IAAMrB,EAAesB,KAAKC,WAAaN,GAAOD,KAAQA,EACtD,OAASE,EAAWlB,EAAesB,KAAKE,MAAMxB,GAGhCyB,CAAgBT,EAAKC,EAAKC,KAOtC,UACE,0BAASQ,GAAG,QAAZ,UACE,gCACE,uBAAOC,QAAQ,MAAf,iBACA,uBACED,GAAG,MACHE,IAAK1B,EACL2B,KAAK,SACLC,KAAK,MACLC,aAAc,EACdC,KAAK,WAGT,gCACE,uBAAOL,QAAQ,MAAf,iBACA,uBACED,GAAG,MACHE,IAAKxB,EACLyB,KAAK,SACLC,KAAK,MACLC,aAAc,GACdC,KAAK,WAGT,sBAAKN,GAAG,aAAR,UACE,qEACA,kGAGJ,yBAASA,GAAG,UAAZ,SACE,gCACE,uBAAOC,QAAQ,WAAf,mCACA,uBAAOE,KAAK,WAAWC,KAAK,WAAWJ,GAAG,kBAG9C,sBAAKA,GAAG,SAAR,UACE,yCACA,8BAAM1B,GAAgB,OAExB,0DAGJ,iCACE,mBAAGiC,KAAK,GAAR,0BCvJRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fcffb316.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { useRef, useState } from \"react\";\n\nconst Main = styled.main`\n  min-width: 300px;\n  max-width: 600px;\n  padding: 10px;\n  margin: auto; \n  & h1 {\n    text-align: center;\n    color: #333;\n  }\n\n  & > form {\n    display: grid;\n    grid-template-rows: 1fr auto 0.75fr 0.25fr;\n\n    & > section#range {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      background-color: #eee;\n      align-items: center;\n      justify-content: center;\n      gap: 10px;\n      padding: 10px;\n      border-radius: 5px;\n      margin: 10px 0;\n\n      & input {\n        width: 100%;\n        height: 3em;\n      }\n\n      &> div#how-to-use {\n        grid-column: 1 / -1;\n        font-size: 0.8em;\n        &> p {\n          margin: 0;\n        }\n      }\n    }\n\n    & > section#options {\n      display: grid;\n      grid-template-columns: 1fr;\n    }\n\n    & > div#result {\n      background-color: #eee;\n      border-radius: 5px;\n      margin: 10px 0;\n      padding: 10px;\n      display: grid;\n      & > div:nth-child(2) {\n        font-size: 2em;\n        overflow: auto;\n      }\n    }\n\n    & > button {\n      color: white;\n      background-color: #0050fd;\n      border: none;\n      border-radius: 5px;\n\n      &:hover {\n        transform: scale(1.05);\n      }\n\n      &:active {\n        background-color: #002d8d;\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [randomNumber, setRandomNumber] = useState();\n  const minRef = useRef();\n  const maxRef = useRef();\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const formData = new FormData(event.target);\n    const formObj = {};\n    for (const key of formData.keys()) {\n      formObj[key] = formData.get(key);\n    }\n\n    const { min, max, fraction } = formObj;\n\n    const getRandomNumber = (min, max, fraction) => {\n      if (isNaN(min)) {\n        min = 0;\n        minRef.current.value = 0;\n      }\n\n      if (isNaN(max)) {\n        max = 10;\n        maxRef.current.value = 10;\n      }\n\n      const randomNumber = Math.random() * (+max - +min) + +min;\n      return !!fraction ? randomNumber : Math.floor(randomNumber);\n    };\n\n    setRandomNumber(getRandomNumber(min, max, fraction));\n  };\n\n  return (\n    <div className=\"container\">\n      <Main>\n        <h1>Random Number Generator</h1>\n        <form onSubmit={handleSubmit}>\n          <section id=\"range\">\n            <div>\n              <label htmlFor=\"min\">Min</label>\n              <input\n                id=\"max\"\n                ref={minRef}\n                type=\"number\"\n                name=\"min\"\n                defaultValue={0}\n                step=\"any\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"max\">Max</label>\n              <input\n                id=\"max\"\n                ref={maxRef}\n                type=\"number\"\n                name=\"max\"\n                defaultValue={10}\n                step=\"any\"\n              />\n            </div>\n            <div id=\"how-to-use\">\n              <p>Minimum Inlusive, Maximum Exclusive.</p>\n              <p>Example: 1 Min, 10 Max, possibilitiles include 1, 2...8, 9.</p>\n            </div>\n          </section>\n          <section id=\"options\">\n            <div>\n              <label htmlFor=\"fraction\">Decimal with fraction</label>\n              <input type=\"checkbox\" name=\"fraction\" id=\"fraction\" />\n            </div>\n          </section>\n          <div id=\"result\">\n            <div>Result</div>\n            <div>{randomNumber || 0}</div>\n          </div>\n          <button>Get new number</button>\n        </form>\n      </Main>\n      <footer>\n        <a href=\"\">Source</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}